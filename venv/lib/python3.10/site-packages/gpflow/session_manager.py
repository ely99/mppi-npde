import os
import warnings
import tensorflow as tf
from tensorflow.python.client import timeline
from . import settings

# Eager Execution è abilitato di default in TensorFlow 2.x, quindi non serve chiamare `enable_eager_execution`.
# tf.compat.v1.enable_eager_execution()

class _DefaultSessionKeeper:
    session = None


class TracerSession:
    def __init__(self, output_file_name=None, output_directory=None,
                 each_time=None, **kwargs):
        self.output_file_name = output_file_name
        self.output_directory = output_directory
        self.each_time = each_time
        self.local_run_metadata = None
        if self.each_time:
            warnings.warn("Outputting a trace for each run. "
                          "May result in large disk usage.")
        self.counter = 0
        self.profiler_options = None  # Eager execution non usa RunOptions
        if self.output_directory is not None:
            if os.path.isfile(self.output_directory):
                raise IOError("In tracer: given directory name is a file.")
            if not os.path.isdir(self.output_directory):
                os.mkdir(self.output_directory)

    def _trace_filename(self):
        """
        Creates trace filename.
        """
        dir_stub = ''
        if self.output_directory is not None:
            dir_stub = self.output_directory
        if self.each_time:
            filename = '{0}_{1}.json'.format(self.output_file_name, self.counter)
        else:
            filename = '{0}.json'.format(self.output_file_name)
        return os.path.join(dir_stub, filename)

    def run(self, fetches, feed_dict=None):
        """
        Esegui le operazioni di TensorFlow 2.x senza necessità di `tf.Session`.
        In questo caso, siamo in modalità Eager Execution, quindi le operazioni
        vengono eseguite immediatamente.
        """
        # Esegui operazioni in Eager Execution
        output = fetches(feed_dict)  # fetches è una funzione o operazione, quindi chiamato direttamente

        if self.output_directory:
            # Profiling e Timeline, in modalità Eager Execution possiamo usare `tf.profiler`.
            trace_time = timeline.Timeline()
            ctf = trace_time.generate_chrome_trace_format()
            with open(self._trace_filename(), 'w') as trace_file:
                trace_file.write(ctf)

        if self.each_time:
            self.counter += 1

        return output


def reset_default_session(*args, **kwargs):
    _DefaultSessionKeeper.session = get_session(*args, **kwargs)


def get_default_session(*args, **kwargs):
    reset = kwargs.pop('reset', False)
    if reset or _DefaultSessionKeeper.session is None:
        _DefaultSessionKeeper.session = get_session(*args, **kwargs)
    return _DefaultSessionKeeper.session


def get_session(*args, **kwargs):
    """
    Ora che Eager Execution è abilitato di default, possiamo semplicemente restituire il `TracerSession`
    senza utilizzare `tf.Session`.
    """
    if settings.profiling.dump_timeline:
        def fill_kwargs(key, value):
            """
            Internal function for filling default None values with meaningful
            values from gpflow settings.
            """
            if kwargs.get(key) is None:
                kwargs[key] = value
        fill_kwargs('output_file_name', settings.profiling.output_file_name)
        fill_kwargs('output_directory', settings.profiling.output_directory)
        fill_kwargs('each_time', settings.profiling.each_time)
        return TracerSession(*args, **kwargs)

    # In TensorFlow 2.x, non c'è bisogno di creare una sessione esplicitamente
    return TracerSession(*args, **kwargs)
